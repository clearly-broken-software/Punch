/*
 *  Copyright (C) 2009 Sampo Savolainen
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 */

/**
 * gschmooz basics. this file includes all compressor functions except
 * for the final process() method.
 **/

// import("rms.dsp");

COEFF2DB(x) = log10(x) * 20;
//DB2COEFF(x) = select2( (x < -318.8) , pow(10, x / 20), 0);
DB2COEFF(x) = pow(10, x / 20);

// apply a threshold to the value and then normalize it to 0
THRESH(t,x) = (x-t) * (t < x);

// smoothing function, attack coefficient "a", release coefficient "r" and signal x
SMOOTH(a, r, prevx, x) =
	(x     *      select2( (x < prevx), a, r )) +
	(prevx * (1 - select2( (x < prevx), a, r)));

//DETECTOR = (	RMS(rms_speed) :
//		COEFF2DB :
//		THRESH(threshold) :
//		SMOOTH(attack, release) ~ _ );

DETECTOR = (	COEFF2DB :
		        THRESH(threshold) :
		SMOOTH(attack, release) ~ _ );

DETECTOR_new(x)  = gain_computer(1,threshold,knee,x:ba.linear2db) ;

gain_computer(strength,thresh,knee,level) =
  select3((level>(thresh-(knee/2)))+(level>(thresh+(knee/2))),
          0,
          ((level-thresh+(knee/2)):pow(2)/(2*knee)) ,
          (level-thresh)
                            ) : max(0)*-strength;
RATIO(x) = 0 - (x - (x/ratio));

/**
 *  Ranges from TK audio BC1
 *
 * Attack  = 0.1ms .. 120ms
 * Release =  50ms .. 1.2s
 *
 * High pass = 150Hz, -6dB / octave
 *      (one should probably make it switchable between 15Hz and 150Hz, just to
 *       get rid of DC)
 */

/**
 * Time ratio (tr) to real time (t):
 *
 *   tr = exp(1) / ( t * ma.SR * time_ratio_target )
 *
 * The ratio system never comes up to the 'target value'.
 * Assuming previous signal level 0.0 and target signal level 1.0
 *
 *  at time_ratio_target = 2,   after t, level will be 0.75
 *  at time_ratio_target = 1.5, after t, level will be 0.84
 *  at time_ratio_target = 1,   after t, level will be 0.94
 *  at time_ratio_target = 0.5, after t, level will be 0.995
 *
 * This ratio is one of the most important parts of the compressor as
 * it affects how release and attack timings are translated.
 *  - The lower the ratio, the steeper the first part of the envelope will.
 *  - The higher the ratio, the action will be farther from what the user expects.
 *
 **/

time_ratio_target = 1.5;

//time_ratio_target_atk = hslider("attack time ratio", 1.5, 0.2, 10.0, 0.1);
//time_ratio_target_rel = hslider("release time ratio", 1.5, 0.2, 5.0, 0.1);
time_ratio_target_atk = 8.0;
//time_ratio_target_rel = 4.0; // this could be too slow
time_ratio_target_rel = 1.5;

time_ratio_attack(t) = exp(1) / ( t * ma.SR * time_ratio_target_atk );
time_ratio_release(t) = exp(1) / ( t * ma.SR * time_ratio_target_rel );

// RMS at 0.5 ms. It should allow for a smoother peak style compression
// min(max()) games due to buffer allocation. faust has to know how large this can become.
/*rms_speed        = 0.0005 * min(192000.0, max(22050.0, ma.SR));*/

/*threshold	 = hslider("threshold (dB)",         -10.0,  -60.0,   10.0, 1.0);*/
/*attack		 = time_ratio_attack( hslider("attack (ms)", 10.0,    0.001,  400.0, 0.001) / 1000 );*/
/*release		 = time_ratio_release( hslider("release (ms)", 300,   0.1, 1200.0, 0.001) / 1000 );*/

/*ratio		 = hslider("compression ratio",          5,    1.5,   20,   0.5);*/
/*makeup_gain 	 = hslider("makeup gain (dB)",           0,      0,   40,   0.5); // DB*/

/*drywet		 = hslider("dry-wet", 1.0, 0.0, 1.0, 0.1);*/

/*bypass_switch = select2( hslider("bypass", 0, 0, 1, 1), 1.0, 0.0);*/

/*
// Hard-wired settings for sndfile tests
rms_speed   = 24;
threshold   = -10;
attack      = time_ratio_attack( 0.001 );
release     = time_ratio_release( 0.300 );
ratio       = 5;
makeup_gain = 0;
drywet      = 1.0;
*/

DRYWET(ratio) = ( *(1 - ratio),  * (ratio)) : +;
DRYWET_STEREO(l, r, ratio) = ( (DRYWET(l, ratio)), (DRYWET(r, ratio)));

//maximum_rate = 10.0/ma.SR;
//maximum_rate = 96.0/ma.SR;
//maximum_rate = 512.0/ma.SR;

RATELIMITER_INTERNAL(maximum_rate,pt, ct, prevx, x) =
  select2( abs(ct-pt) > maximum_rate, x,
           prevx - pt + maximum_rate * select2( (x < prevx), 1.0, -1.0) );

// this corrects for overshooting caused by rate limiting.
// in effect it should eliminate gain oscillation due to this overhsoot
OVERSHOOT_CORRECTION(limited_gain, target_gain, tangent) =
  select2( (tangent > 0.0),
		   select2( (limited_gain > target_gain), limited_gain, target_gain),
		   select2( (limited_gain > target_gain), target_gain, limited_gain));

RATELIMITER(maximum_rate,prevx, x) =
  ( RATELIMITER_INTERNAL( prevx@1 - prevx, prevx - x, prevx, x,maximum_rate), x, (prevx - x) ) :
  OVERSHOOT_CORRECTION;

/*

COMP = _ <: ( DETECTOR : RATIO : ( RATELIMITER ~ _ ) : DB2COEFF );

//COMP = _ <: ( DETECTOR : RATIO : DB2COEFF );

process =  _ <: ( _ , *(COMP) ) : DRYWET(drywet);

//process =  DETECTOR : RATIO : ( RATELIMITER ~ _ ) : DB2COEFF;

*/
