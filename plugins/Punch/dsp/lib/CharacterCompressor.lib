/*
 *  Copyright (C) 2020 Bart Brouns
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; version 2 of the License.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

Based on blushcomp mono by Sampo Savolainen
 */
declare name      "CharacterCompressor";
declare author    "Bart Brouns";
declare version   "0.3.3";
declare copyright "(C) 2020 Bart Brouns";

import("stdfaust.lib");

import ("lib/compressor-basics.lib");
// import ("rms.lib");

import ("lib/biquad-hpf.lib");
import ("lib/slidingReduce.lib");

//the maximum size of the array for calculating the rms mean
//should be proportional to ma.SR
// the size of a par() needs to be known at compile time, so (ma.SR/100) doesn't work
// rmsMaxSize = 441; //441
// rmsMaxSize = 512; //441
rmsMaxSize = pow(2,rmsMaxSize_pow);
rmsMaxSize_pow =14;
// rmsMaxSize_pow =9; //512
// rmsMaxSize_pow =7; // 128

//
MAX_flt = fconstant(int LDBL_MAX, <float.h>);
MIN_flt = fconstant(int LDBL_MIN, <float.h>);

main_group(x)  = (hgroup("[1]", x));

tab_group(x) = main_group(hgroup("[1]", x));
meter_group(x)  = main_group(hgroup("[2]", x));
// tab_group(x) = main_group(tgroup("[2]", x));

easy_group(x)   = tab_group(vgroup("[1] easy", x));
advanced_group(x)   = tab_group(hgroup("[2] advanced", x));

detector_group(x)  = advanced_group(vgroup("[0]detector", x));
post_group(x)      = advanced_group(vgroup("[1]", x));
ratelimit_group(x) = advanced_group(hgroup("[2]ratelimit", x));

ratelimit_knob_group(x) = ratelimit_group(vgroup("[0]", x));

shape_group(x)      = post_group(vgroup("[0]shape", x));
out_group(x)        = post_group(vgroup("[2]", x));

bypass = checkbox("bypass");
meter = _<:(_, (_*(1+bypass*-1) :(meter_group(vbargraph("[1]GR[unit:dB][tooltip: gain reduction in dB]", -60, 0)))):attach);
// meter = meter_group(_<:(_, _*(1+bypass*-1):(ba.linear2db :(vbargraph("[1][unit:dB][tooltip: gain reduction in dB]", -60, 0)))):attach);
changeMeter = _<:(_, (max(-90):min(1)*(1+bypass*-1):ratelimit_group(vbargraph("[1]auto-release[unit:dB][tooltip: the amount of release slowdown due to auto-release]", -90, 0))):attach);
ingain        = easy_group(hslider("[0] Input Gain [unit:dB]   [tooltip: The input signal level is increased by this amount (in dB) to make up for the level lost due to compression]",0, -40, 40, 0.1) : si.smooth(0.999));
threshold     = easy_group(hslider("[1] Threshold [unit:dB]   [tooltip: When the signal level exceeds the Threshold (in dB), its level is compressed according to the Ratio]", -27.1, -80, 0, 0.1));
// strength = easy_group((hslider("[1]strength[tooltip: ]", 0.4145 , 0, 1 , 0.001):pow(strpw)*-22)+11:powerScale);
strength = easy_group((hslider("[2]strength[tooltip: ]", 1 , 0, 8 , 0.1)));
det_strength = detector_group((hslider("[2]det strength[tooltip: ]", 1 , 0, 8 , 0.1)));
strpw = hslider("strpw", 1, 0.001, 1, 0.001);
attackFader=     easy_group(hslider("[3] Attack [unit:ms]  [scale:log] [tooltip: Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new lower target level (the compression `kicking in')]", 23.7, 0.001, maxAttack , 0.1));
maxAttack = 500;
attack        = time_ratio_attack(attackFader/1000) ;
// attack        = attackFader/1000;
easy_release_knob = easy_group(hslider("[4]Release [unit:ms]  [scale:log] [tooltip: time constant (ms) coming out of compression]",16, 0,   1000,   0.1))/1000; //0.0005 * min(192000.0, max(22050.0, ma.SR));
// easy_release = easy_group(hslider("[4]Release[tooltip: ]",108, 1,   rmsMaxSize,   1)*44100/ma.SR); //0.0005 * min(192000.0, max(22050.0, ma.SR));
easy_release = pow(2,(easy_release_knob*rmsMaxSize_pow))*44100/ma.SR:max(1):int;

outgain      = easy_group(hslider("[5]output gain (dB)[tooltip: ]",           0,      -40,   40,   0.1):si.smooth(0.999)); // DB
knee = easy_group(hslider("[5] Knee [unit:dB]
      [tooltip: soft knee amount in dB]",
                          0, 0, 30, 0.1));

// TODO: all gains up-down all times left-right

drywet        = easy_group(hslider("[6]dry-wet[tooltip: ]", 1.0, 0.0, 1.0, 0.1));

peakRMS       = detector_group(hslider("[2] peak/RMS [tooltip: Peak or RMS level detection",1, 0, 1, 0.01));
rms_speed     = detector_group(hslider("[3]RMS size[scale:log][tooltip: ]",96, 2,   rmsMaxSize,   1)*44100/ma.SR); //0.0005 * min(192000.0, max(22050.0, ma.SR));
// rms_speed     = easy_group(pow(2,hslider("[4]Release2[tooltip: ]",6.75, 1,   rmsMaxSize_pow,   0.25))*44100/ma.SR):max(96):int; //0.0005 * min(192000.0, max(22050.0, ma.SR));
// rms_speed     = pow(2,
// (attackFader/maxAttack:pow(0.250)*rmsMaxSize_pow):min(easy_release_knob:pow(0.125)*rmsMaxSize_pow)):max(96):int;
knob_power = hslider("knob_power", 0.001, 0.001, 1, 0.001);
knob_power2 = hslider("knob_power2", 1, 0.001, 1, 0.001);
// rms_speed2     = (attack*2000):int:meter2;
meter2 = meter_group(_<:(_, ((vbargraph("[2][unit:dB][tooltip: input level in dB]2", 0, rmsMaxSize)))):attach);
meter3 = meter_group(_<:(_, (1/_:(vbargraph("[3] 3", 0, 10000000)))):attach);
// powerknob = hslider
ratio         = detector_group(hslider("[5] detector Ratio   [tooltip: A compression Ratio of N means that for each N dB increase in input signal level above Threshold, the output level goes up 1 dB]", 20, 1, 20, 0.01));
release       = detector_group(time_ratio_release(hslider("[7] Detector Release [unit:ms]   [tooltip: Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new higher target level (the compression 'releasing')]",0.1, 0.1, 2000, 0.1)/1000));
// release       = detector_group(hslider("[7] Detector Release [unit:ms]   [tooltip: Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new higher target level (the compression 'releasing')]",0.1, 0.1, 2000, 0.1))/1000;
//hpf_switch  = detector_group(select2( hslider("[8]sidechain hpf[tooltip: ]", 1, 0, 1, 1), 1.0, 0.0));
hpf_freq      = detector_group( hslider("[8]sidechain hpf[scale:log][tooltip: ]", 154, 1, 400, 1));

prePost = detector_group(checkbox("[9] slow/fast  [tooltip: Unchecked: log  domain return-to-threshold detector
      Checked: linear return-to-fi.zero detector]")*-1)+1;

powerScale(x) =((x>=0)*(1/((x+1):pow(3))))+((x<0)* (((x*-1)+1):pow(3)));

// power          = strength; // shape_group(hslider("[1]power[tooltip: ]", 1.881 , -33, 33 , 0.001):powerScale);
power          = shape_group(hslider("[1]power[tooltip: ]", 1.88 , -33, 33 , 0.01):powerScale);
maxGR          = shape_group(hslider("[2] Max Gain Reduction [unit:dB]   [tooltip: The maximum amount of gain reduction]",-15, -60, 0, 0.1)) : min(-0.001): ba.db2linear;
// maxGR          = maxOvershoot+threshold / max(strength,0.001): min(-0.001): ba.db2linear;
maxOvershoot   = shape_group(hslider("[3] Max overshoot [unit:dB]   [tooltip: How much can we go below the threshold]",-15, -60, 0, 0.1)) ;
curve          = shape_group(hslider("[4]curve[tooltip: ]", 0, -1, 1 , 0.01)*-1);
shape          = shape_group(((hslider("[5]shape[tooltip: ]", 94, 1, 100 , 0.1)*-1)+101):pow(2));

feedFwBw     = out_group(hslider("[0]feedback/feedforward[tooltip: ]", 0, 0, 1 , 0.001));
hiShelfFreq  = out_group(hslider("[1]hi shelf freq[tooltip: ]",134, 1,   400,   1));
gainHS       = out_group(hslider("[2]gain/hi-shelve crossfade[tooltip: ]", 0.811, 0, 1 , 0.001));
dryWet       = out_group(hslider("[3]dry/wet", 1, 0, 1, 0.001));

bypass_switch = select2( hslider("bypass[tooltip: ]", 0, 0, 1, 1), 1.0, 0.0);

ratelimit      = ratelimit_knob_group(hslider("[0]ratelimit amount[tooltip: ]", 1, 0, 1 , 0.001));
// maxRateAttack  =
// select2(attackFader>=23.7
// ,((attackFader/23.7)*-6980)+8000
// ,(((attackFader-23.7)/(maxAttack-23.7))*-1020)+1020
// );
maxRateAttack  = ratelimit_knob_group(hslider("[1]max attack[unit:dB/s][tooltip: ]", 1020, 6, 8000 , 1)/ma.SR);
// maxRateDecay   = // 0 => 8000, 0.482 = 3813  1=24
// select2(easy_release_knob>=0.482
// ,((easy_release_knob/0.482)*(-8000+3813))+8000
// ,(((easy_release_knob-0.482)/(1-0.482))*(-3813+24))+3813
// )/ma.SR;
maxRateDecay   = ratelimit_knob_group(hslider("[2]max decay[unit:dB/s][tooltip: ]", 3813, 6, 8000 , 1)/ma.SR);
decayMult      = ratelimit_knob_group(hslider("[3]decayMult[tooltip: ]", 20000 , 0,200000 , 100)/100);
decayPower     = ratelimit_knob_group(hslider("[4]decayPower[tooltip: ]", 50, 0, 50 , 0.1));
GRcompensate   = ratelimit_knob_group(hslider("[5]GRcompensate[tooltip: ]", 1 , 0,10 , 0.001));
// IM_size        = easy_release;// ratelimit_knob_group(hslider("[5]IM_size[tooltip: ]",108, 1,   rmsMaxSize,   1)*44100/ma.SR); //0.0005 * min(192000.0, max(22050.0, ma.SR));
IM_size        = ratelimit_knob_group(hslider("[5]IM_size[scale:log][tooltip: ]",108, 1,   rmsMaxSize,   1)*44100/ma.SR); //0.0005 * min(192000.0, max(22050.0, ma.SR));

powlim(x,base) = x:max(log(MAX_flt)/log(base)):  min(log(MIN_flt)/log(base));

gainPlusMeter(gain,dry) = (dry * (gain:meter));

hiShelfPlusMeter(gain,dry) = (dry :fi.high_shelf(gain:meter:ba.linear2db,hiShelfFreq));

gainHiShelfCrossfade(crossfade,gain,dry) = (dry * (gain*(1-crossfade):ba.db2linear)): fi.high_shelf((gain*crossfade),hiShelfFreq);
// gainHiShelfCrossfade(crossfade,gain,dry) = (dry * (gain:ba.db2linear));

crossfade(x,a,b) = a*(1-x),b*x : +;

rmsFade = _<:crossfade(peakRMS,abs,slidingRMSn( rms_speed, rmsMaxSize)); // bypass makes the dsp double as efficient. On silence RMS takes double that (so in my case 7, 13 and 21 %)

/*COMP = (1/((1/(((_ <: ( HPF : DETECTOR : RATIO : ba.db2linear : max(ba.db2linear(-140)) : min (1) :pow(prePower):ba.linear2db*/
/*<: ( RATELIMITER ~ _ ),_:crossfade(ratelimit) : ba.db2linear ): max(MIN_flt) : min (MAX_flt)):pow(1/power))):max(ba.db2linear(-140))*maxGR*2*ma.PI:ma.tanh:/(2*ma.PI))/maxGR)):min(1);*/

// detector = ((_ <: ( HPF(hpf_freq) :rmsFade: DETECTOR : RATIO : ba.db2linear:min(1):max(MIN_flt))));
detector = ((_ <: ( HPF(hpf_freq) :rmsFade: my_peak_compression_gain_mono(det_strength,threshold,attack,release,knee,prePost)  :min(1):max(MIN_flt))));

my_peak_compression_gain_mono(strength,thresh,att,rel,knee,prePost) =
  abs:ba.bypass1(prePost,lag(att,rel)) : ba.linear2db : gain_computer(strength,thresh,knee):ba.bypass1((prePost*-1)+1,lag(rel,att)) : ba.db2linear
with {
  lag(att,rel) = SMOOTH(att, rel) ~ _;
  gain_computer(strength,thresh,knee,level) =
    select3((level>(thresh-(knee/2)))+(level>(thresh+(knee/2))),
            0,
            ((level-thresh+(knee/2)):pow(2)/(2*knee)) ,
            (level-thresh)
    ) : max(0)*-strength;
};
//<:_,_:pow(powlim( prePower)):preRateLim:min(1):max(MIN_flt)

preRateLim = _;//ba.linear2db<: _,( rateLimiter(maximum_rate,maximum_rate) ~ _ ):crossfade(ratelimit) : ba.db2linear;

maxGRshaper = _;//max(maxGR);
//maxGRshaper = (1/((1/_*maxGR*2*ma.PI:ma.tanh:/(2*ma.PI))/maxGR)):min(1);

tanshape(amp,x) =(ma.tanh(amp*(x-1)))+1;

//((ma.tanh(amp*((x*2)-1)))/2)+0.5;

curve_pow(fact,x) = ((x*(x>0):pow(p))+(x*-1*(x<=0):pow(p)*-1)) with
{
  p = exp(fact*10*(log(2)));
};

rateLimiter(maxRateAttack,maxRateDecay,prevx,x) = prevx+newtangent:min(0)
with {
  tangent     = x- prevx;
  avgChange   = abs((tangent@1)-(tangent@2)):slidingMeanN(IM_size,rmsMaxSize)*decayMult:_+1:pow(decayPower)-1;
  newtangent  = select2(tangent>0,minus,plus):max(maxRateAttack*-1):min(maxRateDecay);
  plus        = tangent*((abs(avgChange)*-1):changeMeter:ba.db2linear);
  minus       = tangent;//*((abs(avgChange)*0.5):ba.db2linear);
};

COMP(x) = x:detector:shaper:ba.linear2db
                            <: _,( rateLimiter(maxRateAttack,maxRateDecay) ~ _ ):crossfade(ratelimit);

shaper = _<:_,_:pow(powlim(power)):(_-maxGR)*(1/(1-maxGR)): curve_pow(curve):tanshape(shape):_*(1-maxGR):_+maxGR;

// blushcomp(x) =crossfade(dryWet,x,( (( crossfade(feedFwBw,x,_) : ( COMP , x ) : gainHiShelfCrossfade(gainHS))~_)))*(ba.db2linear(outgain))*(1+bypass*-1)+(x*bypass);
//

GainReduction(x) = ((ingain:ba.db2linear),(x<:(_,_)):(*,_))
                   : ((( (((crossfade(feedFwBw,_,_): ( COMP <:(_,_))),_): (_,ro.cross(2))) ):((_,(_):gainHiShelfCrossfade(gainHS)),_))~(_,!))
                   :(!,si.lag_ud(easy_release_knob,0));

blushcomp(x) =
  GainReduction(x):
  (
    ( ((x:fi.high_shelf(0,hiShelfFreq)),(((_*strength:meter),x*(ingain:ba.db2linear)):gainHiShelfCrossfade(gainHS))):crossfade(dryWet) *(ba.db2linear(outgain)))*(1+bypass*-1)+(x*bypass)
  )
;

blushcompN(N) =
  (busN<:(inSum:GainReduction<:si.bus(N+1)),busN):(busN,cross1n(N)):(ro.interleave(N,2),_)
  :par(i, N,
       (_ , (_<:(_,_,_)))
       : (ro.cross(2),_,_)
       :     ( ((_:fi.high_shelf(0,hiShelfFreq)),(((_*strength:meter),_*(ingain:ba.db2linear)):gainHiShelfCrossfade(gainHS))):crossfade(dryWet) *(ba.db2linear(outgain)))*(1+bypass*-1)+(_*bypass)
    )
 ,(_*strength)

with {
  cross1n(n) = route(n+1,n+1, par(i, n+1, i+1, (((i+n)%(n+1))+1)));
  busN = si.bus(N);
  inSum = busN:>_;
};


midStereoBlushComp(x,y) =(x*(ingain:ba.db2linear)+y*(ingain:ba.db2linear)): (( (crossfade(feedFwBw,_,_): ( COMP )) <: ((_,(x+y):gainHiShelfCrossfade(gainHS)),_))~(_,!))
                                                                            // :((_*(ba.db2linear(outgain)))*(1+bypass*-1)+(x*bypass),(_*(ba.db2linear(outgain)))*(1+bypass*-1)+(y*bypass));
                                                                            :!,si.lag_ud(easy_release_knob,0)<:(
                           ( ((x:fi.high_shelf(0,hiShelfFreq)),(((_*strength:meter),x*(ingain:ba.db2linear)):gainHiShelfCrossfade(gainHS))):crossfade(dryWet) *(ba.db2linear(outgain)))*(1+bypass*-1)+(x*bypass)
                          ,( ((y:fi.high_shelf(0,hiShelfFreq)),(((_*strength:meter),y*(ingain:ba.db2linear)):gainHiShelfCrossfade(gainHS))):crossfade(dryWet) *(ba.db2linear(outgain)))*(1+bypass*-1)+(y*bypass)
);

midBlushComp(x,y) =(x+y)*ingain: (_ <:( crossfade(feedFwBw,_,_),_ : ( COMP , _ ) : gainHiShelfCrossfade(gainHS))~_)
*(ba.db2linear(outgain))<:((_-(y:fi.high_shelf(0,hiShelfFreq))),(_-(x:fi.high_shelf(0,hiShelfFreq))));

//process =blushcomp ;
// process =midStereoBlushComp ;
//process(x,y) = (( (crossfade(feedFwBw,_,_): ( COMP ))<:(_,_)) :(((x*ingain),_:gainHiShelfCrossfade(gainHS)),((y*ingain),_:gainHiShelfCrossfade(gainHS))));

detect= (ba.linear2db :
		 THRESH(threshold)
// :RATIO);
);
/*:SMOOTH(attack, release) ~ _ );*/

predelay = 0.05*ma.SR;

delayed(x) = x@predelay;
prevgain=1;
lookaheadLimiter(x,prevgain,prevtotal) =
  select2(goingdown,(prevgain+up:min(0),(prevgain+down))),
  (totaldown:dbmeter)
//threshold:meter
with {
  dbmeter =ba.db2linear:meter: ba.linear2db;
  currentlevel = ((abs(x)):ba.linear2db);
  goingdown = ((currentlevel+prevgain)>(threshold))|(prevgain>prevtotal);
  //prevLin=prevgain:ba.db2linear;
  down = (totaldown-prevgain)/predelay;
  //down = totaldown(x)/predelay;
  totaldown =
    select2(prevgain>=prevtotal', 0  , newdown  );
  newdown =// (currentlevel+prevgain):THRESH(threshold);
            min(prevtotal,0-((currentlevel):THRESH(threshold)));
  //select2(0-((currentlevel):THRESH(threshold))<prevtotal,prevtotal,0-((currentlevel):THRESH(threshold)));

  up = 800/ma.SR;

  tangent     = x- prevx;
  avgChange   = abs((tangent@1)-(tangent@2)):slidingMeanN(IM_size,rmsMaxSize)*decayMult:_+1:pow(decayPower)-1;
  newtangent  = select2(tangent>0,minus,plus):max(maxRateAttack*-1):min(maxRateDecay);
  plus        = tangent*((abs(avgChange)*-1):ba.db2linear);
  minus       = tangent;//*((abs(avgChange)*0.5):ba.db2linear);
//select2(abs(tangent)>maxRate,tangent,maxRate);

};

limiter(x) = (lookaheadLimiter(x)~(_,_)):((_:ba.db2linear)*x@predelay,!);

lookaheadLimite(x,prevgain,prevtotal) =
  select2(abs(x):ba.linear2db-prevgain>threshold,(prevgain+3),(prevgain+4:min(0))),
  select2(abs(x):ba.linear2db-prevgain>threshold,1,2);

//process = limiter,limiter;

/*process = gainHiShelfCrossfade;*/
